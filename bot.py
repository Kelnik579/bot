import logging
import openai
import os
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

API_TOKEN = os.getenv("API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY

user_sessions = {}
FREE_LIMIT = 3

menu = ReplyKeyboardMarkup(resize_keyboard=True)
menu.add(KeyboardButton("üìÑ –ù–∞–ø–∏—Å–∞—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞—Ç"), KeyboardButton("üåê –ü–µ—Ä–µ–∫–ª–∞—Å—Ç–∏"))
menu.add(KeyboardButton("üß™ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç"))

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_sessions:
        user_sessions[user_id] = 0
    await message.reply("–ü—Ä–∏–≤—ñ—Ç! –Ø StudentAI. –û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:", reply_markup=menu)

@dp.message_handler(lambda message: message.text in ["üìÑ –ù–∞–ø–∏—Å–∞—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞—Ç", "üåê –ü–µ—Ä–µ–∫–ª–∞—Å—Ç–∏", "üß™ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç"])
async def handle_menu(message: types.Message):
    user_id = message.from_user.id
    if user_sessions[user_id] >= FREE_LIMIT:
        await message.reply("‚ùå –í–∏—á–µ—Ä–ø–∞–Ω–æ –ª—ñ–º—ñ—Ç –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤. –û—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.")
        return

    if message.text == "üìÑ –ù–∞–ø–∏—Å–∞—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞—Ç":
        await message.reply("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–º—É —Ä–µ—Ñ–µ—Ä–∞—Ç—É:")
        dp.register_message_handler(handle_essay, state=None)
    elif message.text == "üåê –ü–µ—Ä–µ–∫–ª–∞—Å—Ç–∏":
        await message.reply("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É:")
        dp.register_message_handler(handle_translate, state=None)
    elif message.text == "üß™ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç":
        await message.reply("–í–≤–µ–¥—ñ—Ç—å —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:")
        dp.register_message_handler(handle_test_answer, state=None)

async def handle_essay(message: types.Message):
    user_id = message.from_user.id
    topic = message.text
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": f"–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–µ—Ñ–µ—Ä–∞—Ç –Ω–∞ —Ç–µ–º—É: {topic}"}]
    )
    user_sessions[user_id] += 1
    await message.reply(response.choices[0].message['content'])

async def handle_translate(message: types.Message):
    user_id = message.from_user.id
    text = message.text
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": f"–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é: {text}"}]
    )
    user_sessions[user_id] += 1
    await message.reply(response.choices[0].message['content'])

async def handle_test_answer(message: types.Message):
    user_id = message.from_user.id
    question = message.text
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": f"–î–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è: {question}"}]
    )
    user_sessions[user_id] += 1
    await message.reply(response.choices[0].message['content'])

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)